import RPi.GPIO as GPIO
import time

# Global variable
LED_STATE = False

# Pin Declaration
greenLEDPin = 12
soundSensorPin =17 

# GPIO Settings
GPIO.setmode(GPIO.BCM)
GPIO.setup(soundSensorPin, GPIO.IN, pull_up_down = GPIO.PUD_DOWN)
GPIO.setup(greenLEDPin, GPIO.OUT, initial = GPIO.LOW)

def soundSensorHandler(argument):
    global LED_STATE
    endTime = int(round(time.time() * 1000)) + int(500)
    currentTime = int(round(time.time() * 1000))
    soundPeak = 1
    GPIO.remove_event_detect(soundSensorPin)
    while(currentTime <= endTime):
        if GPIO.input(soundSensorPin):
            soundPeak = soundPeak + 1
            time.sleep(0.1)
            print ('soundPeak')
        currentTime = int(round(time.time() * 1000))
    if soundPeak >= 6:
        if LED_STATE:
            GPIO.output(greenLEDPin, GPIO.LOW)
            print ('Turned of LED')
            LED_STATE = False
        else:
            GPIO.output(greenLEDPin,GPIO.HIGH)
            print ('Turned On LED')
            LED_STATE = True
    else:
        print ('No Sound Detected')

    GPIO.add_event_detect(soundSensorPin, GPIO.RISING, callback=soundSensorHandler, bouncetime=300)

GPIO.add_event_detect(soundSensorPin, GPIO.RISING, callback=soundSensorHandler, bouncetime = 300)

while True:
        time.sleep(5)
	




import RPi.GPIO as GPIO
import time
#GPIO SETUP
channel = 17
GPIO.setmode(GPIO.BCM)
GPIO.setup(channel, GPIO.IN)
def callback(channel):
        if GPIO.input(channel):
                print "Sound Detected!"
        else:
                print "Sound Detected!"
GPIO.add_event_detect(channel, GPIO.BOTH, bouncetime=300)  # let us know when the pin goes HIGH or LOW
GPIO.add_event_callback(channel, callback)  # assign function to GPIO PIN, Run function on change
# infinite loop
while True:
        time.sleep(1)






import time
import board
import busio
import adafruit_ads1x15.ads1115 as ADS
from adafruit_ads1x15.analog_in import AnalogIn
import RPi.GPIO as GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
# Create the I2C bus
i2c = busio.I2C(board.SCL, board.SDA)

# Create the ADC object using the I2C bus
ads = ADS.ADS1115(i2c)

# Create single-ended input on channels
chan0 = AnalogIn(ads, ADS.P0)
chan1 = AnalogIn(ads, ADS.P1)
chan2 = AnalogIn(ads, ADS.P2)
chan3 = AnalogIn(ads, ADS.P3)

delayTime = 1
Digital_PIN = 24

GPIO.setup(Digital_PIN, GPIO.IN, pull_up_down = GPIO.PUD_OFF)

while True:
    analog = '%.2f' % chan0.voltage
 
    # output to console
    if GPIO.input(Digital_PIN) == False:
        print ("Analog voltage value:", analog, "V, ", "Limit: not yet reached")
    else:
        print ("Analog voltage value:", analog, "V, ", "Limit: reached")
    print ("---------------------------------------")
 
    # reset + delay
    button_pressed = False
    time.sleep(delayTime)
